
variables:
  # Container(OCI) images for various distros and architectures and compilers

  RUSTFMT_NIGHTLY:           "registry.gitlab.com/alatiera/rustfmt-oci-image/rustfmt:nightly"
  CLIPPY_NIGHTLY:            "registry.gitlab.gnome.org/gnome/librsvg-oci-images/clippy:nightly"


stages:
  - test
  - lint

# Use cargo to test the project
test:cargo:
  image: "rust:latest"
  stage: test

  script:
  - mkdir -p .cargo_cache
  
  # Only stuff inside the repo directory can be cached
  # Override the CARGO_HOME variable to force it location
  - export CARGO_HOME="${PWD}/.cargo_cache"

  - rustc --version && cargo --version      # Print version info for debugging
  - cargo test --all --verbose --release

  cache:
    # JOB_NAME - Each job will have it's own cache
    # COMMIT_REF_SLUG = Lowercase name of the branch
    # ^ Keep diffrerent caches for each branch
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - target/
      - .cargo_cache/


# Configure and run rustfmt on nightly
# Exits and builds fails on bad format
rustfmt:
  image: $RUSTFMT_NIGHTLY
  stage: lint
  script:
    - rustc --version && cargo --version
    - cargo fmt --version
    - cargo fmt --all -- --check

# Configure and run clippy on nightly
# Only fails on errors atm.
clippy:
  image: $CLIPPY_NIGHTLY
  stage: lint
  script:
    - rustc --version && cargo --version
    - cargo install clippy --force
    - cargo clippy --all
  when: manual
